getwd()
library(ggplot2)
install.packages("tidyverse")
ls
library(ggplot2)
ggplot(iris) + geom_point(aes(x = 1:10, y = 1:10))
ggplot() + geom_point(aes(x = 1:10, y = 1:10))
5411/22
# foreach
library(foreach)
#library(doParallel)
library(doMC)
(no_cores = detectCores() - 1)
registerDoMC(no_cores)
registerDoMC(no_cores)
registerDoMC(no_cores)
getDoParWorkers()
foreach(exponent = 2:4, .combine = c)  %dopar%  base^exponent # c/cbind/rbind/list
# variable scope
base <- 2
foreach(exponent = 2:4, .combine = c)  %dopar%  base^exponent # c/cbind/rbind/list
foreach(exponent = 2:4, .combine = list, .multicombine = TRUE)  %dopar%  base^exponent
# simulate some data
D <- rnorm(1000, 165, 5)
M <- D + rnorm(1000, 0, 1)
# calculate linear model
DataModel <- lm(D ~ M)
Beta <- coef( DataModel )[2]
# Execute sampling and analysis in parallel
matrix <- foreach(i=1:nSim, .combine=rbind) %dopar% {
perm <- sample(D, replace=FALSE)
mdl <- lm(perm ~ M)
c(i, coef(mdl))
}
nSim<-10000
# Execute sampling and analysis in parallel
matrix <- foreach(i=1:nSim, .combine=rbind) %dopar% {
perm <- sample(D, replace=FALSE)
mdl <- lm(perm ~ M)
c(i, coef(mdl))
}
# Execute sampling and analysis in parallel
start = proc.time()
# Execute sampling and analysis in parallel
start = proc.time()
matrix <- foreach(i=1:nSim, .combine=rbind) %dopar% {
perm <- sample(D, replace=FALSE)
mdl <- lm(perm ~ M)
c(i, coef(mdl))
}
proc.time() - start
start = proc.time()
matrix <- foreach(i=1:nSim, .combine=rbind) %dopar% {
perm <- sample(D, replace=FALSE)
mdl <- lm(perm ~ M)
c(i, coef(mdl))
}
proc.time() - start
start = proc.time()
matrix <- for(i in 1:1000){
perm <- sample(D, replace=FALSE)
mdl <- lm(perm ~ M)
c(i, coef(mdl))
}
proc.time() - start
start = proc.time()
matrix <- for(i in 1:10000){
perm <- sample(D, replace=FALSE)
mdl <- lm(perm ~ M)
c(i, coef(mdl))
}
proc.time() - start
start = proc.time()
matrix <- foreach(i=1:nSim, .combine=rbind) %dopar% {
perm <- sample(D, replace=FALSE)
mdl <- lm(perm ~ M)
c(i, coef(mdl))
}
proc.time() - start
start = proc.time()
matrix <- for(i in 1:nSim){
perm <- sample(D, replace=FALSE)
mdl <- lm(perm ~ M)
c(i, coef(mdl))
}
proc.time() - start
library(microbenchmark)
microbenchmark(
matrix1 <- foreach(i=1:nSim, .combine=rbind) %dopar% {
perm <- sample(D, replace=FALSE)
mdl <- lm(perm ~ M)
c(i, coef(mdl))
},
matrix2 <- for(i in 1:nSim){
perm <- sample(D, replace=FALSE)
mdl <- lm(perm ~ M)
c(i, coef(mdl))
}
)
# Execute sampling and analysis in parallel
start = proc.time()
matrix <- foreach(i=1:nSim, .combine=rbind) %dopar% {
perm <- sample(D, replace=FALSE)
mdl <- lm(perm ~ M)
c(i, coef(mdl))
}
proc.time() - start
#compare
start = proc.time()
matrix <- for(i in 1:nSim){
perm <- sample(D, replace=FALSE)
mdl <- lm(perm ~ M)
c(i, coef(mdl))
}
proc.time() - start
getwd()
getwd()
shiny::runApp('Documents/BU/FALL2017/MA615/Demo1008')
runApp('Documents/BU/FALL2017/MA615/Demo1008')
runApp('Documents/BU/FALL2017/MA615/Demo1008')
runApp('Documents/BU/FALL2017/MA615/Demo1008')
runApp('Documents/BU/FALL2017/MA615/Demo1008')
paste0("select * from", "business")
paste0("select * from ", "business", "limit 5")
paste0("select * from ", "business", " limit 5")
runApp('Documents/BU/FALL2017/MA615/Demo1008')
dbListTables(mydb)
mydb = dbConnect(
drv = RMySQL::MySQL(),
dbname = "yelp_db",
host = '45.63.90.29',
username = "mssp",
password = "mssp2017"
)
runApp('Documents/BU/FALL2017/MA615/Demo1008')
runApp('Documents/BU/FALL2017/MA615/Demo1008')
runApp('Documents/BU/FALL2017/MA615/Demo1008')
runApp('Documents/BU/FALL2017/MA615/Demo1008')
runApp('Documents/BU/FALL2017/MA615/Demo1008')
runApp('Programs/test')
runApp('Documents/BU/FALL2017/MA615/Demo1008')
runApp('Documents/BU/FALL2017/MA615/Demo1008')
runApp('Documents/BU/FALL2017/MA615/Demo1008')
runApp('Documents/BU/FALL2017/MA615/Demo1008')
runApp('Documents/BU/FALL2017/MA615/Demo1008')
pittbusiness = read.csv("pitt.csv")
getwd()
setwd("~/Documents/BU/FALL2017/MA615")
setwd("~/Documents/BU/FALL2017/MA615/Demo1008")
pittbusiness = read.csv("pitt.csv")
runApp()
mydb = dbConnect(
drv = RMySQL::MySQL(),
dbname = "yelp_db",
host = '45.63.90.29',
username = "mssp",
password = "mssp2017"
)
a = mydb %>% dbGetQuery("select * from business;")
unique(a$state)
a = mydb %>% dbGetQuery("select * from business;") %>% filter(state == "NYK")
View(a)
long = mean(a$longitude)
lat = mean(a$latitude)
leaflet()
leaflet(a) %>% addTiles() %>%
setView( lng = long, lat = lat, zoom = 12 ) %>%
addTiles() %>%
addCircleMarkers(
~longitude,~latitude,
radius = 1,
color = ~pal1(stars),
fillOpacity = 0.5, label = ~htmlEscape(name)) %>%
addLegend("bottomright", pal = pal1, values = ~stars,
title = "Stars",
labFormat = labelFormat(prefix = ""),
opacity = 1
)
leaflet(a) %>% addTiles() %>%
setView( lng = long, lat = lat, zoom = 12 ) %>%
addTiles() %>%
addCircleMarkers(
~longitude,~latitude,
radius = 1,
fillOpacity = 0.5, label = ~htmlEscape(name))
b = mydb %>% dbGetQuery("select * from business;")
unique(b$state)
a = b %>% filter(state == "CA")
long = mean(a$longitude)
lat = mean(a$latitude)
leaflet(a) %>% addTiles() %>%
setView( lng = long, lat = lat, zoom = 12 ) %>%
addTiles() %>%
addCircleMarkers(
~longitude,~latitude,
radius = 1,
fillOpacity = 0.5, label = ~htmlEscape(name))
a = b %>% filter(state == "OH")
long = mean(a$longitude)
lat = mean(a$latitude)
leaflet(a) %>% addTiles() %>%
setView( lng = long, lat = lat, zoom = 12 ) %>%
addTiles() %>%
addCircleMarkers(
~longitude,~latitude,
radius = 1,
fillOpacity = 0.5, label = ~htmlEscape(name))
leaflet(a) %>% addTiles() %>%
setView( lng = long, lat = lat, zoom = 12 ) %>%
addTiles() %>%
addCircleMarkers(
~longitude,~latitude,
radius = 1,
fillOpacity = 0.5, label = ~htmlEscape(name))
leaflet(a) %>% addTiles() %>%
setView( lng = long, lat = lat, zoom = 15 ) %>%
addTiles() %>%
addCircleMarkers(
~longitude,~latitude,
radius = 1,
fillOpacity = 0.5, label = ~htmlEscape(name))
leaflet(a) %>% addTiles() %>%
setView( lng = long, lat = lat, zoom = 10 ) %>%
addTiles() %>%
addCircleMarkers(
~longitude,~latitude,
radius = 1,
fillOpacity = 0.5, label = ~htmlEscape(name))
runApp()
